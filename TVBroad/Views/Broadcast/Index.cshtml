@model List<TVBroad.Domain.Entities.Broadcasting>

@{
    ViewData["Title"] = "Broadcast List";
    bool isScheduler = User.IsInRole("Scheduler");
    bool isApprover = User.IsInRole("Approver");
}

<h2>@ViewData["Title"]</h2>

@if (isScheduler)
{
    <a asp-action="Create" class="btn btn-primary mb-3">Add Broadcast</a>
}

<table class="table table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Title</th>
            <th>Start</th>
            <th>End</th>
            <th>Status</th>
            @if (isScheduler || isApprover)
            {
                <th>Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.StartTime.ToString("g")</td>
                <td>@item.EndTime.ToString("g")</td>
                <td>@item.Status</td>

                @if (isScheduler || isApprover)
                {
                    <td>
                        @* Scheduler Buttons *@
                        @if (isScheduler)
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Edit</a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Delete</a>
                        }

                        @* Approver Buttons — only for Pending status *@
                        @* @if (isApprover && item.Status == Status.Pending)
                        {
                            <a asp-action="Review" asp-route-id="@item.Id" class="btn btn-sm btn-success">Accept</a>
                            <a asp-action="Review" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Reject</a>
                        } *@
                    </td>
                }
            </tr>
        }
    </tbody>
</table>



<h3 class="mt-5">4.5-Hour Broadcast Schedule</h3>
<div id="schedule-container" class="table-responsive mt-3"></div>

@section Scripts {
    <script>
                function getTimeSlots() {
                    const now = new Date();
                    now.setSeconds(0, 0);
                    const baseSlot = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes() < 30 ? 0 : 30);
                    baseSlot.setMinutes(baseSlot.getMinutes() - 120); // 2 hours before

                    const slots = [];
                    for (let i = 0; i < 9; i++) {
                        const start = new Date(baseSlot.getTime() + i * 30 * 60000);
                        const end = new Date(start.getTime() + 30 * 60000);
                        slots.push({ start, end });
                    }
                    return slots;
                }

                function loadSchedule() {
                    fetch('/json/broadcasts.json?v=' + new Date().getTime()) // Cache-busting URL
                        .then(res => {
                            if (!res.ok) throw new Error("Failed to fetch broadcasts.json");
                            return res.json();
                        })
                        .then(data => {
                            const slots = getTimeSlots();
                            const now = new Date();
                            now.setSeconds(0, 0);
                            const currentSlotIndex = slots.findIndex(s => now >= s.start && now < s.end);

                            let html = `<table class='table table-bordered text-center'><thead><tr><th>Title</th>`;
                            for (let i = 0; i < slots.length; i++) {
                                const slot = slots[i];
                                const isCurrent = i === currentSlotIndex;
                                html += `<th class="${isCurrent ? 'table-primary' : ''}">
                                    ${slot.start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}<br>to<br>
                                    ${slot.end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
        </th>`;
                            }
                            html += `</tr></thead><tbody>`;

                            data.forEach(b => {
                                html += `<tr><td class='text-start fw-bold'>${b.title}</td>`;
                                for (let i = 0; i < slots.length; i++) {
                                    const slot = slots[i];
                                    const start = new Date(b.startTime);
                                    const end = new Date(b.endTime);
                                    const inSlot = start < slot.end && end > slot.start;
                                    const isCurrent = i === currentSlotIndex;

                                    let cellClass = '';
                                    if (inSlot) cellClass += 'bg-info text-white ';
                                    if (isCurrent) cellClass += 'table-primary';

                                    html += `<td class="${cellClass.trim()}">${inSlot ? b.description : ''}</td>`;
                                }
                                html += `</tr>`;
                            });

                            html += `</tbody></table>`;
                            document.getElementById("schedule-container").innerHTML = html;
                        })
                        .catch(err => {
                            console.error("Error:", err.message);
                            document.getElementById("schedule-container").innerHTML = `<div class="alert alert-danger">Unable to load schedule. ${err.message}</div>`;
                        });
                }

                loadSchedule();
                setInterval(loadSchedule, 1000 * 60 * 30); // Refresh every 30 minutes
    </script>
}